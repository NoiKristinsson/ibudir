xpathApply(parsed.html,"//td[@class='MsgHdrSent']/span", xmlValue)
date()
the.dates <- xpathApply(parsed.html,"//td[@class='MsgHdrSent']/span", xmlValue)
as.date(the.dates)
as.date(the.date)
as.date(the.dates())
as.Date(the.dates())
as.Date(the.dates
)
as.Date(the.dates, "%d%B%Y")
df$filname <- substr(the.dates, 0, 3)
substr(the.dates, 0, 3)
substr(the.dates, 0, 17)
gsub('[^a-zA-Z0-9]','', the.dates)
gsub('[^a-zA-Z0-9" "]','', the.dates)
the.dates <- substr(the.dates, 0, 17)
gsub('[^a-zA-Z0-9" "]','', the.dates)
members <- as.numeric(gsub("[^0-9]", "", as.list(xpathApply(parsed.html,"//td[@id='iframeBody']", xmlValue))))
member_list <- as.dataframe()
member_list <- dataframe()
member_list <- data.frame()
cbind(members, the.dates)
cbind(as.numberic(members), the.dates)
cbind(as.number(members), the.dates)
as.numberic(members)
as.number(members)
as.numbers(members)
as.numeric(members)
cbind(as.numeric(members), the.dates)
the.dates <- gsub('[^a-zA-Z0-9" "]','', the.dates)
cbind(as.numeric(members), the.dates)
member_list <- cbind(as.numeric(members), the.dates)
rev(member_list)
member_list
rev(the.dates)
members <- rev(members)
the.dates <- rev(the.dates)
member_list <- data.frame()
as.numeric(members)
member_list <- cbind(as.numeric(members), the.dates)
View(member_list)
write.csv2(member_list, "member_list.csv")
write.csv2(member_list, "/piratar/member_list.csv")
write.csv2(member_list, "piratar/member_list.csv")
substr(the.dates, 3, 17)
the.dates <- xpathApply(parsed.html,"//td[@class='MsgHdrSent']/span", xmlValue)
substr(the.dates, 3, 17)
the.dates <- substr(the.dates, 5, 17)
substr(the.dates, 5, 17)
the.dates <- xpathApply(parsed.html,"//td[@class='MsgHdrSent']/span", xmlValue)
substr(the.dates, 3, 17)
substr(the.dates, 5, 17)
substr(the.dates, 6, 17)
the.dates <- xpathApply(parsed.html,"//td[@class='MsgHdrSent']/span", xmlValue)
the.dates <- substr(the.dates, 6, 17)
the.dates <- gsub('[^a-zA-Z0-9" "]','', the.dates)
the.dates <- rev(the.dates)
members <- rev(members)
member_list <- data.frame()
as.numeric(members)
member_list <- cbind(as.numeric(members), the.dates)
write.csv2(member_list, "piratar/member_list.csv")
members <- rev(members)
member_list <- data.frame()
as.numeric(members)
member_list <- cbind(as.numeric(members), the.dates)
write.csv2(member_list, "piratar/member_list.csv")
as.dates
as.dates(the.dates)
(the.dates)
as.dates(the.dates)
as.date(the.dates)
as.Date(the.dates)
as.Date(the.dates, %b%d%Y)
as.Date(the.dates, "%b%d%Y")
sessionInfo()
Sys.setenv(LANG = "en_US.UTF-8")
sessionInfo()
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
sessionInfo()
as.Date(the.dates, "%b%d%Y")
Sys.setlocale("LC_MESSAGES", 'is_IS.UTF-8')
Sys.setenv(LANG = "is_IS.UTF-8")
sessionInfo()
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
as.Date(the.dates, "%b%d%Y")
Sys.setlocale("LC_TIME", "en_US")
as.Date(the.dates, "%b%d%Y")
Sys.setlocale("LC_TIME", "is_IS")
as.Date(the.dates, "%b%d%Y")
the.dates <- as.Date(the.dates, "%b%d%Y")
member_list <- data.frame()
install.packages("sql")
install.packages("RMySQL")
RMySQL
RMySQL()
library(RMySQL)
RMySQL
RMySQL::
RMySQL()
MySQL
MySQL()
MySQL
dat <- matrix(1:4, 2, 2)
View(dat)
View(dat)
query <- paste("INSERT INTO names VALUES(",data[1,1], ",", data[1,2], ")")
query <- paste("INSERT INTO names VALUES" (,data[1,1], ",", data[1,2], )")
)
)
query <- paste("INSERT INTO names VALUES" (,data[1,1], ",", data[1,2], ))
query <- paste("INSERT INTO names VALUES(", paste(data[1,], collapse = ", "), ")")
query <- paste("INSERT INTO names VALUES(",data[1,1], ",", data[1,2], ")")
data <- matrix(1:4, 2, 2)
query <- paste("INSERT INTO names VALUES(",data[1,1], ",", data[1,2], ")")
dbGetQuery(con, query)
library(MySQL)
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='root', host='localhost')
mydb = dbConnect(MySQL('noi'), user='root', password='root', host='localhost')
mydb = dbConnect(MySQL('noi'), user='root', password='root', host='127.0.0.1')
mydb = dbConnect(MySQL(), user='root', password='root', host='127.0.0.1')
mydb = dbConnect(MySQL(), user='root', password='root', host='127.0.0.1')
mydb = dbConnect(MySQL(), user='root', password='root', host='127.0.0.1', port=8889)
mydb
blanda <- data.frame()
blanda <- read.csv2(file = "ibudir_nyjasta.csv")
blanda
mydb = dbConnect(MySQL(), user='root', password='root', host='127.0.0.1', port=8889, dbname="bookstore")
mydb = dbConnect(MySQL(), user='root', password='root', host='127.0.0.1', port=8889, dbname="noi")
dbWriteTable(connection, "ibudir", blanda, append = TRUE).
dbWriteTable(connection, "ibudir", blanda, append = TRUE)
mydb = dbConnect(MySQL(), user='root', password='root', host='127.0.0.1', port=8889, dbname="noi")
blanda <- data.frame()
blanda <- read.csv2(file = "ibudir_nyjasta.csv")
dbWriteTable(connection, "ibudir", blanda, append = TRUE)
dbWriteTable(connection, value = blanda, name = "ibudir", append = TRUE )
dbWriteTable(mydb, "ibudir", blanda, append = TRUE)
dbWriteTable(mydb, value = blanda, name = "ibudir", append = TRUE )
View(blanda)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, 'set character set "utf8"')
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, 'set character set "utf8"')
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, 'CHARACTER SET utf8')
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, set_charset = utf8)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, SET NAMES utf8)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, SET NAMES = utf8)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, )
Sys.getlocale()
blanda <- read.csv2(file = "ibudir_nyjasta.csv", encoding="utf-8" )
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, )
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, )
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F)
mydb = dbConnect(MySQL(), user='root', password='root', host='127.0.0.1', port=8889, dbname="noi")
dbWriteTable(mydb, "ibudir", blanda, append = TRUE, row.names = F, )
wd
require(XML)
require(RCurl)
require(MySQL)
require(RMySQL)
blanda_ready <- data.frame()
blanda <- data.frame()
website <- "http://www.mbl.is/fasteignir/leit/?q=abfafabeaea3e6435c02ce698e13fe6a"
fixedURL <- getURL(website, followlocation=TRUE)
parsed.html <- htmlParse(fixedURL, encoding='UTF-8')
theline <- xpathApply(parsed.html,"//div[@class='info']/small", xmlValue)
theline <- gsub('\\n', ' ', theline) ### breyta \n í bil
theline <- sub("\\s+$", "", theline) ### fjarlægja bilið sem hefur birst í endann
total.pages <- as.numeric(tail(strsplit(theline,split=" ")[[1]],1)) #### vinna seinasta orðið úr setningunni og nota það sem tölustaf.
num.pages <- c(1:total.pages)
total.pages <- as.numeric(tail(strsplit(theline,split=" ")[[1]],1)) #### vinna seinasta orðið úr setningunni og nota það sem tölustaf.
theline
website
parsed.html
theline <- xpathApply(parsed.html,"//div[@class='info']/small", xmlValue)
theline
theline <- xpathApply(parsed.html,"//div[@class='info']/small", xmlValue)
theline
parsed.html <- htmlParse(fixedURL, encoding='UTF-8')
parsed.html
theline <- xpathApply(parsed.html,"//div[@class='info']/small", xmlValue)
theline
theline <- xpathApply(parsed.html,"//div[@class='info']/small", xmlValue)
if (is.null(theline)) {
num.pages <- 1
} else
{
theline <- gsub('\\n', ' ', theline) ### breyta \n í bil
theline <- sub("\\s+$", "", theline) ### fjarlægja bilið sem hefur birst í endann
total.pages <- as.numeric(tail(strsplit(theline,split=" ")[[1]],1)) #### vinna seinasta orðið úr setningunni og nota það sem tölustaf.
num.pages <- c(1:total.pages)}
num.pages
require(XML)
require(RCurl)
require(RMySQL)
blanda_ready <- data.frame()
blanda <- data.frame()
website <- "http://www.mbl.is/fasteignir/leit/?q=abfafabeaea3e6435c02ce698e13fe6a"
fixedURL <- getURL(website, followlocation=TRUE)
parsed.html <- htmlParse(fixedURL, encoding='UTF-8')
### Hérna byrja ég á því að skoða hvað það eru margar síður á fasteignum mbl ###
theline <- xpathApply(parsed.html,"//div[@class='info']/small", xmlValue)
if (is.null(theline)) {
num.pages <- 1
total.pages <- 1
} else
{
theline <- gsub('\\n', ' ', theline) ### breyta \n í bil
theline <- sub("\\s+$", "", theline) ### fjarlægja bilið sem hefur birst í endann
total.pages <- as.numeric(tail(strsplit(theline,split=" ")[[1]],1)) #### vinna seinasta orðið úr setningunni og nota það sem tölustaf.
num.pages <- c(1:total.pages)}
### Progress bar
t <- 1
pb <- txtProgressBar(1, total.pages, style=3)
#### hér er loopan til að sækja allt
for (i in num.pages){
#The progress bar first
##        t <- (t+1)
##        Sys.sleep(0.02)
##        setTxtProgressBar(pb, t)
website <- paste0("http://www.mbl.is/fasteignir/leit/?page=", 1, "&q=abfafabeaea3e6435c02ce698e13fe6a")
fixedURL <- getURL(website, followlocation=TRUE)
parsed.html <- htmlParse(fixedURL, encoding='UTF-8')
gotuheiti <- gsub('.{1}$', '', as.list(xpathApply(parsed.html, "//h4", xmlValue)))
postnr <- as.numeric(gsub("[^0-9]", "", as.list(xpathApply(parsed.html, "//h5", xmlValue))))
tegund <- xpathApply(parsed.html,"//div[@class='realestate-properties']/span[contains(.,'Tegund')]/strong", xmlValue)
verd <- as.numeric(gsub("[^0-9]", "", xpathApply(parsed.html,"//div[@class='realestate-properties']/span[contains(.,'Verð')]/strong", xmlValue)))
size <- as.numeric(gsub('.{3}$', '', xpathApply(parsed.html,"//div[@class='realestate-properties']/span[contains(.,'Stærð')]/strong", xmlValue)))
herbergi <- as.numeric(xpathApply(parsed.html,"//div[@class='realestate-properties']/span[contains(.,'Herbergi')]/strong", xmlValue))
# gera lista af dagsetningum
nyskrad <- rep(list(as.character(Sys.Date())), length(gotuheiti))
options(scipen=999)
blanda <- as.data.frame(cbind(gotuheiti, postnr, tegund, verd, herbergi, size, nyskrad))
## hérna er fermverd búið til.
fermverd <- round(as.numeric(blanda$verd)/as.numeric(blanda$size), digits = 0)
fermverd <- as.list(fermverd)
blanda$fermverd <- fermverd
blanda_ready <- rbind(blanda_ready, blanda)
}
###keep only unique
blanda_ready <- unique(blanda_ready)
### unlist so I can save as cvs
blanda_ready$gotuheiti <- unlist(blanda_ready$gotuheiti)
blanda_ready$postnr <- unlist(blanda_ready$postnr)
blanda_ready$tegund <- unlist(blanda_ready$tegund)
blanda_ready$verd <- unlist(blanda_ready$verd)
blanda_ready$herbergi <- unlist(blanda_ready$herbergi)
blanda_ready$size <- unlist(blanda_ready$size)
blanda_ready$fermverd <- unlist(blanda_ready$fermverd)
blanda_ready$nyskrad <- unlist(blanda_ready$nyskrad)
# Breyta öllum inf í NA
blanda_ready[ blanda_ready == "Inf" ] = NA
# Remove ALL NA cases
blanda_ready <- na.omit(blanda_ready)
save.name <- paste0("/var/www/skrapari/ibudir/nyskradar_ibudir_verd_", Sys.Date(), ".csv")
write.csv2(blanda_ready, file = save.name)
mydb = dbConnect(MySQL(), user='noi', password='noipassword', host='127.0.0.1', dbname="noi")
dbWriteTable(mydb, "wp_ibudir", blanda, append = TRUE, row.names = F, )
print("----")
print("ibudir -- nyskradar -- scraper successful")
print(date())
sample
sample(x,size = 1)
sample(size = 1)
sample(eightd, size = 1)
eightd <- c(1:8)
sample(eightd, size = 1)
sample(eightd, size = 1)
sample(eightd, size = 1)
sample(eightd, size = 1)
sample(eightd, size = 1)
sample(eightd, size = 1)
sample(eightd, size = 5)
df
count = 20
player = 0
for (i in count) {
player <- player + 1
if (player = 4) {
player <- 1
}
}
count = 20
player = 0
for (i in count) {
player <- player + 1
if (player = 4) {
player <- 1
}
}
count = 20
player = 0
for (i in count) {
player <- player + 1
if (player == 4) {
player <- 1
}
}
count = 20
player = 0
for (i in count) {
player <- player + 1
if (player == 4) {
player <- 1
print player
}
}
count = 20
player = 0
for (i in count) {
player <- player + 1
if (player == 4) {
player <- 1
}
print player
}
if (count == 20 ) print "test"
if (count == 20 ) {print "test"}
if (count == 20 ) { print "test"}
count = 20
player = 0
for (i in count) {
player <- player + 1
if(player == 4) {
player <- 1
}
print player
}
if(player == 4) {
player <- 1
}
for (i in count) {
player <- player + 1
if(player == 4) {
player <- 1
}
print player
}
count = 20
player = 0
for (i in count) {
player <- player + 1
if(player == 4) {
player <- 1
}
print(player)
}
count = 20
player = 0
for (i in count) {
player <- player + 1
if(player == 4) {
player <- 1
}
print(player)
}
count = 20
player = 0
for (i in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
for (x in count) {
player <- player + 1
print(player)
}
count <- 20
player <- 0
for (x in count) {
player <- player + 1
print(player)
}
count <- 20
player <- 0
for (x in count){
player <- player + 1
print(player)
}
count <- 20
player <- 0
for (x in count){
player <- player + 1
print(player)
}
r
R
count <- 20
player <- 0
for (i in count){
player <- player + 1
print(player)
}
setwd("~/forritun/ibudir/test2")
setwd("~/forritun/ibudir/map_app")
shiny::runApp()
runApp()
mymap
mymap <- ggmap(get_map(c(v.punktur, s.punktur , a.punktur, n.punktur), source = "google"))
runApp()
print(isolate(a.punktur))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplot2
?ggmap
?ggplot2
runApp()
